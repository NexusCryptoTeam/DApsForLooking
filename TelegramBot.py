'''
–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
1. 
'''

import asyncio
import random
import json
import re
import os
import sys

from tqdm import tqdm
from telethon.tl.functions.channels import LeaveChannelRequest, JoinChannelRequest
from telethon.sync import TelegramClient, events
from telethon.tl import functions, types
from telethon.errors.rpcerrorlist import TimeoutError, FloodWaitError, ReactionInvalidError, MessageIdInvalidError
from telethon.tl.types import InputPeerUser, PeerUser, PeerChannel, ReactionEmoji
from telethon.tl.patched import MessageService, Message

os.system("cls")
print('\n               ###################################')
print('                ## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AidaxoBOT! ##')
print('                ###################################')

api_id = 586975
api_hash = '8da243f2ffc1a4efe56a7d87a3e2c4be'

bot_token = '6495496017:AAFn3Vvs_SzYbZjJMtvL2Xtv6s6LJLv93P8'

user_id = 440512037
look_sms = True
look_error = True

like_count = 0
i_spam = 0
i_join = 0

message_count = {}
mut = False

file_list = ['–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫.txt', '–ì—Ä—É–ø–ø—ã.txt', '–∞–∫–∫–∞—É–Ω—Ç—ã.json'] 
for file_path in file_list:
    if not os.path.exists(file_path):
        with open(file_path, "w", encoding='utf-8'):
            pass

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –ì—Ä—É–ø–ø—ã.txt
def process_file(file_path = '–ì—Ä—É–ø–ø—ã.txt'):
    group_dict = {}
    hey = False
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        filtered_lines = [line for line in lines if not any(keyword in line.lower() for keyword in ['@ensearchbot', 'üì¢'])]

        with open(file_path, 'w', encoding='utf-8') as file:
            file.writelines(filtered_lines)
    
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()

            links_and_usernames = re.findall(r'(https://t.me/[^) \n]+|@[^) \n]+)', content)
            for link in links_and_usernames:
                if link.startswith('https://t.me/'):
                    hey = True
                    link = link.replace('https://t.me/', '@')
                    print(f'link.strip = {link}')
                    group_name = link.split('@')[1]
                elif link.startswith('@'):
                    group_name = link[1:]

                group_dict[group_name] = link

        with open(file_path, 'w', encoding='utf-8') as file:
            file.writelines(link + '\n' for link in group_dict.values())

        return hey
    except FileNotFoundError:
        return group_dict
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {file_path}: {e}')

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –í –∫–æ–Ω—Å–æ–ª—å
async def send(–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Ç–µ–∫—Å—Ç, admin = False, user = True):
    try:
        if user:
            response = await –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.send_message(–ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Ç–µ–∫—Å—Ç)
        if admin:
            response = await –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å.send_message(user_id, —Ç–µ–∫—Å—Ç)
        return response
    except Exception as e:
        print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][{type(e)}] –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {—Ç–µ–∫—Å—Ç}\n–û—à–∏–±–∫–∞: {e}')

async def send_reaction(client, message, dialog):
    global selected_account
    try:
        msg_id = message.id
        blacklist_word = selected_account["LIKE_–ß–°_–§–†–ê–ó–´"] # –≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑, —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
        text = message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ñ—Ä–∞–∑—ã –∏–∑ blacklist_word
        if any(word in text for word in blacklist_word):
            return False  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ó–¥–µ—Å—å —è —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞ –∏–∑ blacklist_word
        access = dialog.entity.access_hash
        chanel_id = dialog.message.peer_id.channel_id
        reaction = ReactionEmoji(emoticon="üëç")
        peer = types.InputPeerChannel(chanel_id, access)
        await client(functions.messages.SendReactionRequest(peer=peer, msg_id=msg_id, reaction=[reaction]))
        await asyncio.sleep(1.3)
        return False
    except FloodWaitError as e:
        with tqdm(total=e.seconds, desc=f"–ë–∞–Ω –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏.. –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥") as pbar:
            for _ in range(e.seconds):
                pbar.update(1)
                await asyncio.sleep(1.3)
        return False
    except ReactionInvalidError:
        print(f'[–õ–∞–π–∫–µ—Ä] –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏.. –°–ª–µ–¥—É—é—â–∞—è –≥—Ä—É–ø–ø–∞')
        return True
    except MessageIdInvalidError:
        print(f'[–õ–∞–π–∫–µ—Ä] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å id —á–∞—Ç–∞.. –°–ª–µ–¥—É—é—â–∞—è –≥—Ä—É–ø–ø–∞')
        return True
    except TypeError:
        return True
    except Exception as e:
        type_error = type(e)
        print(f'[–û—à–∏–±–∫–∞][{type_error}] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç: {e}')
        return True
 
# –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
def load_from_file(filename, default_value):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return file.read().strip()
    except (FileNotFoundError, ValueError, IOError):
        return default_value

# –í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
async def leave_chanel(client, dialog):
    try:
        await client(LeaveChannelRequest(dialog.entity.id))
        return
    except Exception as e:
        print(f'[–û—à–∏–±–∫–∞] –ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ –∑–∞ –æ—à–∏–±–∫–∏: {e}')
        return

# –†–ê–°–°–´–õ–ö–ê
async def spam(bot, me, client): 
    global last_message, interval_spam, i_spam, selected_account, like_count, spamer

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    async def –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(me, error, text, client):
        global last_message, interval_spam, i_spam, selected_account
        try:
            error_type = type(error)
            
            if 'None' in str(error):
                await send(client, 178220800, '/start')
                return 'ban'
            elif 'ban' in str(error):
                await send(client, 178220800, '/start')
                return 'ban'
            elif "banned" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][error_type] –£ –≤–∞—Å –º—É—Ç.  –û—Ç–ø—Ä–∞–≤–ª—è—é /start –≤ spambot')
                await send(client, 178220800, '/start')
                await send(client, 178220800, '/start')
                return 'ban'
            elif 'CHAT_SEND_VIDEOS_FORBIDDEN' in str(error):
                try:
                    text = await teg_text(client, dialog, last_message, di, count_of_spaces)
                    await client.send_file(dialog.entity, "image.jpg", caption=text)
                    i_spam += 1
                    print(f'[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ] –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {dialog.name} –°–æ–æ–±—â–µ–Ω–∏–π: [{i_spam}] –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_spam}')
                except Exception as e:
                    if 'CHAT_SEND_PHOTOS_FORBIDDEN' in str(error):
                        print(f'[–ó–ê–ü–†–ï–¢] –í —á–∞—Ç–µ {dialog.name} –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∏ –≤–∏–¥–µ–æ –Ω–∏ —Ñ–æ—Ç–æ.. –≤—ã—Ö–æ–¥')
                        await leave_chanel(client, dialog)
                    else:
                        print(f'[–ó–ê–ü–†–ï–¢] –ó–∞–ø—Ä–µ—Ç: {str(error)}')
                        await leave_chanel(client, dialog)
                return '–í–∏–¥–µ–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ'
            elif "You can't write in this chat" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][{error_type}][–†–∞—Å—Å—ã–ª–∫–∞] –í –≥—Ä—É–ø–ø–µ "{dialog.name}" –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å. –í—ã—Ö–æ–¥..')
                await leave_chanel(client, dialog)
                return '–ó–∞–ø—Ä–µ—Ç –≤ —á–∞—Ç–µ'
            elif "Cannot send requests while disconnected" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][{error_type}][–†–∞—Å—Å—ã–ª–∫–∞] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è.. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
                await client.connect()
                return '–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è'
            elif "A wait of" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][{error_type}] –ù—É–∂–Ω–æ –∂–¥–∞—Ç—å, –ø—Ä–µ–∂–¥–µ, —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ "{dialog.name}"')
                return '–ù—É–∂–Ω–æ –∂–¥–∞—Ç—å'
            elif "CHAT_SEND_PLAIN_FORBIDDEN" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][{error_type}] –í –≥—Ä—É–ø–ø–µ "{dialog.name}" –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≥—Ä—É–ø–ø—ã.\n{error}')
                return '–ó–∞–ø—Ä–µ—â–µ–Ω —Ç–µ–∫—Å—Ç'
            elif "Cannot forward messages of type" in str(error):
                print(f'[–û—à–∏–±–∫–∞][{error_type}] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {error}')
                await send(client, me.id, '–ü–æ–π–¥—É –Ω–∞ —Ä—ã–±–∞–ª–∫—É. –ö—Ç–æ —Å–æ –º–Ω–æ–π?') 
                await send(client, me.id, '–£ –º–µ–Ω—è —Å–ª–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –∂–∏–∑–Ω–∏. –ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?')
                await send(client, me.id, '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ö—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç —Ñ–∏–ª—å–º?')
                await send(client, me.id, '–û—Ç–¥–∞–º –∞–≤–∏–∞–±–∏–ª–µ—Ç –≤ –ë–∞–Ω–≥–∫–æ–∫ –∑–∞ 100$ (–≤—ã–ª–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é). –°—Ä–æ—á–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –ø–ª–∞–Ω—ã.')
                send_i = 3
                try:
                    last_message = await client.get_messages(me.id, limit=send_i+1)
                except Exception as e:
                    print(f'[–û–®–ò–ë–ö–ê][–†–∞—Å—Å—ã–ª–∫–∞]\n[{me.phone}][@{me.username}]\n`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}`')
                return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è'
            elif "list index out of range" in str(error):
                print(f'[–û—à–∏–±–∫–∞][{error_type}] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {error}')
                await send(client, me.id, '–ü–æ–π–¥—É –Ω–∞ —Ä—ã–±–∞–ª–∫—É. –ö—Ç–æ —Å–æ –º–Ω–æ–π?')
                await send(client, me.id, '–£ –º–µ–Ω—è —Å–ª–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –∂–∏–∑–Ω–∏. –ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç?')
                await send(client, me.id, '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ö—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç —Ñ–∏–ª—å–º?')
                await send(client, me.id, '–û—Ç–¥–∞–º –∞–≤–∏–∞–±–∏–ª–µ—Ç –≤ –ë–∞–Ω–≥–∫–æ–∫ –∑–∞ 100$ (–≤—ã–ª–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é). –°—Ä–æ—á–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –ø–ª–∞–Ω—ã.')
                send_i = 2
                return '–ó–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞'
            elif "The specified message ID is invalid" in str(error):
                print(f'[–û—à–∏–±–∫–∞][{error_type}] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}')
                last_message = await client.get_messages(me.id, limit=send_i+1)
                return
            elif "The chat is restricted and cannot be used in that request" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ì—Ä—É–ø–ø–∞ "{dialog.name}" –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π')
                return
            elif 'The channel specified is private and you lack permission' in str(error):
                return 1
            elif 'Message was too long' in str(error):
                print(f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {dialog.name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}')
            else:
                print(f'[–û–®–ò–ë–ö–ê][–†–∞—Å—Å—ã–ª–∫–∞]\n –û—à–∏–±–∫–∞: {error} \n–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {dialog.name}  \n[{me.phone}][@{me.username}]')
                return
        except Exception as e:
            print(f'[–û–®–ò–ë–ö–ê] –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏: {e}')
            return

    # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –µ—Å—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - —É–¥–∞–ª—è–µ–º –∏—Ö
    async def check_my_message(client, dialog, me): 
        try:
            last_10_messages = await client.get_messages(dialog.entity.id, limit=100)
            
            if last_10_messages == 1:
                return True

            found_my_message = False
            for message in last_10_messages:
                if str(me.id) in str(message.from_id):
                    found_my_message = True
                    break

            if found_my_message: # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for message in last_10_messages: # —á–µ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏–π - —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–µ–¥–∏ 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                    if str(me.id) in str(message.from_id):
                        await client.delete_messages(dialog, message.id)
                return True
            else:
                return True
        except Exception as e:
            print(f'[–û—à–∏–±–∫–∞] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}')
            return False

    # –§–æ—Ä–º–∞—Ç–∏–≤—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ–≥–≥–µ—Ä–æ–º
    async def teg_text(client, dialog, last_message, di, count_of_spaces):
        try:
            text = last_message[di].message
            
            participants = await client.get_participants(dialog.entity)
            random.shuffle(participants)

            # –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é —Å—Ä–µ–∑–∞
            participants = participants[:count_of_spaces]

            i = 0
            for parcip in participants:
                i += 1
                if i >= count_of_spaces:
                    break
                mention = f'*[\u180E](tg://user?id={parcip.id})'
                # –ò—â–µ–º –ø—Ä–æ–±–µ–ª –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if ' ' in text:
                    text = text.replace(' ', mention, i)
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                else:
                    break  
            i = 0
            for parcip in participants:
                i += 1
                if i >= count_of_spaces:
                    break
                mention = ' '
                if '*' in text:
                        text = text.replace('*', mention, i)
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                else:
                    break 
            print(f'[–¢–µ–≥–≥–µ—Ä] –û—Ç–º–µ—á–µ–Ω–æ {i} —á–µ–ª–æ–≤–µ–∫.')
            return text
        except Exception as e:
            print(f'[–û–®–ò–ë–ö–ê] –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–≤–ª–µ—á—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–∞—Ç–∞ @{dialog.name}. –û—à–∏–±–∫–∞: {e}')
            return text

    if bool(selected_account['–†–∞—Å—Å—ã–ª–∫–∞']):
        print(f'[–†–∞—Å—Å—ã–ª–∫–∞] –ó–∞–ø—É—â–µ–Ω–∞')
    else:
        print(f'[–†–∞—Å—Å—ã–ª–∫–∞] –í—ã–∫–ª—é—á–µ–Ω–∞')
    if bool(selected_account['–õ–∞–π–∫–µ—Ä']):
        print(f'[–õ–∞–π–∫–µ—Ä] –ó–∞–ø—É—â–µ–Ω')
    else:
        print(f'[–õ–∞–π–∫–µ—Ä] –í—ã–∫–ª—é—á–µ–Ω')
    if bool(selected_account['–¢–µ–≥–≥–µ—Ä']):
        print(f'[–¢–µ–≥–≥–µ—Ä] –ó–∞–ø—É—â–µ–Ω')
    else:
        print(f'[–¢–µ–≥–≥–µ—Ä] –í—ã–∫–ª—é—á–µ–Ω')
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª
    while True:

        try:
            if bool(selected_account['–†–∞—Å—Å—ã–ª–∫–∞']):
                send_i = int(selected_account['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π_–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'])
                print(f'[–†–∞—Å—Å—ã–ª–∫–∞] –°–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç—Å—è: {send_i+1}')
                try:
                    last_message = await client.get_messages(me.id, limit=send_i+1)

                except Exception as e:
                    print(f'[–û–®–ò–ë–ö–ê] –í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}')
                    continue

            
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª
            while True:

                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
                try:
                    dialogs = await client.get_dialogs()
                    if bool(selected_account['–†–∞—Å—Å—ã–ª–∫–∞']):
                        dialogs = sorted(dialogs, key=lambda dialog: dialog.date, reverse=False)

                except TimeoutError:
                    print('–°–ª–∞–±–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.. –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..')
                    continue
                except TypeError:
                    continue
                except Exception as e:
                    error_type = type(e)
                    print(f'[–û—à–∏–±–∫–∞][{error_type}] –í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}')
                    continue 
                
                # –¶–∏–∫–ª –¥–∏–∞–ª–æ–≥–æ–≤
                for dialog in dialogs:

                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏–∫–ª–∞ –¥–∏–∞–ª–æ–≥–æ–≤
                    try:
                        blacklist = selected_account['blacklist']
                        liker = bool(selected_account['–õ–∞–π–∫–µ—Ä'])
                        teger = bool(selected_account['–¢–µ–≥–≥–µ—Ä'])
                        spamer = bool(selected_account['–†–∞—Å—Å—ã–ª–∫–∞'])
                        interval_spam = int(selected_account['–ò–Ω—Ç–µ—Ä–≤–∞–ª_—Ä–∞—Å—Å—ã–ª–∫–∞'])
                        
                        if spamer:
                            di = int(random.uniform(0, send_i))

                        if spamer:
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            count_of_spaces = last_message[di].message.count(' ')

                        # –û—Ç—Å–µ–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω—ã—Ö —á–∞—Ç–æ–≤
                        if (dialog is None) or (dialog.entity is None) or (dialog.name is None) or isinstance(dialog.entity, types.User) or (str(dialog.name) in blacklist):
                            continue

                        # –ß–∞—Ç - —Ç–∏–ø —á–∞—Ç–∞ 
                        if isinstance(dialog.entity, types.Chat):
                            dialog_entity = dialog.name
                            
                            if dialog.entity.participants_count == 0:
                                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –í –≥—Ä—É–ø–ø–µ {dialog.name} 0 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—é..')
                                continue
                            pass

                        # –ö–∞–Ω–∞–ª -  —Ç–∏–ø —á–∞—Ç–∞  
                        elif isinstance(dialog.entity, types.Channel):
                            dialog_entity = f"@{dialog.entity.username}"
                            if dialog_entity == '@None':
                                dialog_entity = dialog.name
                            if dialog.entity.megagroup:
                                if str(dialog.entity.username) in blacklist: 
                                    print('[–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫] –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ')
                                    continue
                                pass
                            else: # –ï—Å–ª–∏ –Ω–µ –º–µ–≥–∞–≥—Ä—É–ø–ø–∞
                                continue

                            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º
                            if dialog.entity.default_banned_rights == None:
                                continue

                            # –ï—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ü–µ–ª–æ–º.
                            if dialog.entity.default_banned_rights.send_messages:
                                print(f'[–ó–ê–ü–†–ï–¢] –≤ —á–∞—Ç–µ "{dialog.name}" –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã—Ö–æ–∂—É..')
                                await leave_chanel(client, dialog)

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            if not await check_my_message(client, dialog, me):
                                continue
                            
                            # –ï—Å–ª–∏ –∑–∞–ø—Ä–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
                            try:
                                if not spamer:
                                    pass
                                elif (dialog.entity.banned_rights == None) and (dialog.entity.default_banned_rights.send_plain):
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                                    print(f'[–ó–ê–ü–†–ï–¢] –í —á–∞—Ç–µ "{dialog.name}" –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..')
                                    try:
                                        text = await teg_text(client, dialog, last_message, di, count_of_spaces)
                                        await client.send_file(dialog.entity, "video.mp4", caption=text)
                                        i_spam += 1
                                        print(f'[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ] –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É "{dialog.name}" –°–æ–æ–±—â–µ–Ω–∏–π: [{i_spam}] –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_spam}')
                                    except Exception as e:
                                        print(f'[–û—à–∏–±–∫–∞] if dialog.entity.default_banned_rights.send_plain:')
                                        error = await –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(me, e, text, client)
                                    continue
                                elif (dialog.entity.banned_rights is not None) and (dialog.entity.default_banned_rights.send_plain or dialog.entity.banned_rights.send_plain):
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                                    print(f'[–ó–ê–ü–†–ï–¢] –≤ —á–∞—Ç–µ {dialog.name} –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..')
                                    try:
                                        text = await teg_text(client, dialog, last_message, di, count_of_spaces)
                                        await client.send_file(dialog.entity, "video.mp4", caption=text)
                                        i_spam += 1
                                        print(f'[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ] –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {dialog.name} –°–æ–æ–±—â–µ–Ω–∏–π: [{i_spam}] –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_spam}')
                                    except Exception as e:
                                        print(f'[–û—à–∏–±–∫–∞] if dialog.entity.banned_rights is not None and')
                                        error = await –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(me, e, text, client)
                                    continue
                            except Exception as e:
                                print(f'[–û—à–∏–±–∫–∞][{error_type}] –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞')
                                error = await –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(me, e, text, client)
                                continue

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                        if not await check_my_message(client, dialog, me):
                            continue

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–µ—Ä–æ–º –∏–ª–∏ –±–µ–∑
                        try:
                            if not spamer:  
                                pass
                            elif teger:
                                try:
                                    text = await teg_text(client, dialog, last_message, di, count_of_spaces)
                                    await client.send_message(dialog.entity.id, text)
                                except Exception as e:
                                    error = await –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(me, e, bot, client)
                                    if error == 'ban':
                                        pass
                                    else:
                                        continue
                            else: 
                                await client.forward_messages(dialog.entity.id, last_message[di])

                            if spamer:
                                # –°—á–µ—Ç—á–∏–∫
                                i_spam += 1
                                print(f'[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ][@{me.username}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {dialog_entity} –°–æ–æ–±—â–µ–Ω–∏–π: [{i_spam}] –ò–Ω—Ç–µ—Ä–≤–∞–ª: [{interval_spam}]')

                                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-—Ç–∞–π–º–µ—Ä–∞
                                cheker = interval_spam
                                message_otchet = await send(bot, me.id, f'# [–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê]\n' 
                                                                        f'# –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {dialog_entity}\n'
                                                                        f'# –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{i_spam}]\n'
                                                                        f'# –ñ–¥–µ–º {cheker} —Å. –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π..')

                            # –¢–∞–π–º–µ—Ä —Å –ª–∞–π–∫–µ—Ä–æ–º –∏–ª–∏ –±–µ–∑
                            if liker:
                                messages = await client.get_messages(dialog.entity, limit=interval_spam)
                                black_group = selected_account["LIKE_–ß–°_–ì–†–£–ü–ü–´"]

                                for message in messages:
                                    try:
                                        
                                        #print(message)
                                        sender_type = type(message.from_id)
                                        
                                        if sender_type is PeerUser:
                                            sender_id = message.from_id.user_id
                                        
                                        elif sender_type is PeerChannel:
                                            sender_id = message.from_id.channel_id
                                            continue

                                        else:
                                            continue

                                        #print(f'from: {sender_id}')
                                        if bool(message.pinned) or bool(message.reactions):
                                            continue
                                        
                                        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                                        with open(f'cache/id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π[{me.id}].txt', "a+") as file:
                                            
                                            try:
                                                
                                                file.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
                                                data = file.read() # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                                                user_data = dict() # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                                                
                                                if data: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
                                                    user_data = eval(data)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º eval() –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Python-—Å–ª–æ–≤–∞—Ä—å

                                                if sender_id in user_data: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –≤ –¥–∞–Ω–Ω—ã—Ö
                                                    user_data[sender_id] += 1
                                                    
                                                    if user_data[sender_id] > 3:
                                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                                                        file.seek(0)
                                                        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
                                                        file.truncate()
                                                        # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                                                        file.write(str(user_data))
                                                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                                        file.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                                                        continue
                                            
                                                else:
                                                    # –ï—Å–ª–∏ ID –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                                                    user_data[sender_id] = 1
                                                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —Å—á–µ—Ç—á–∏–∫–æ–º —Ä–∞–≤–Ω—ã–º 1

                                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                                                file.seek(0)
                                                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
                                                file.truncate()
                                                # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                                                file.write(str(user_data))
                                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                                file.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                                            
                                            except SyntaxError:
                                                pass
                                            
                                            except Exception as e:
                                                print(f'[–õ–∞–π–∫–µ—Ä][{type(e)}] Error: {e}')

                                        if dialog.name in black_group:
                                            print(f'[–õ–∞–π–∫–µ—Ä] –ì—Ä—É–ø–ø–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.')
                                            if spamer:
                                                await asyncio.sleep(interval_spam)
                                            pass
                                        
                                        else:
                                            react = await send_reaction(client, message, dialog)
                                            print(f'[–õ–∞–π–∫–µ—Ä][@{me.username}] –ß–∞—Ç: {dialog_entity} –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—Å–µ–≥–æ: {like_count}')
                                            if react:
                                                break
                                            like_count +=1 
                                    
                                    except Exception as e:
                                        print(f'[–õ–∞–π–∫–µ—Ä][{type(e)}] –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ª–∞–π–∫–∞: {e}')
                            
                            else:
                                interval_rand = int(random.uniform(interval_spam * 0.9, interval_spam * 1.1))
                                for _ in range(interval_rand):
                                    cheker -= 1
                                    
                                    if cheker % 5 == 0:
                                        await bot.edit_message(message_otchet,  f'# [–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê]'
                                                                                f'\n# –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {dialog_entity} '
                                                                                f'\n# –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{i_spam}]'
                                                                                f'\n# –ñ–¥–µ–º {cheker} —Å. –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π..')

                                    await asyncio.sleep(1)
                                await bot.delete_messages(me.id, message_otchet)

                            # –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥
                            @bot.on(events.NewMessage(incoming=True))
                            async def checker(event):
                                if event.sender.id == me.id:
                                    message = event.text
                                    if message == '/check':
                                        await event.reply(f'# [–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê]'
                                                        f'\n# –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {dialog_entity}'
                                                        f'\n# –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{i_spam}]'
                                                        f'\n# –ñ–¥–µ–º {cheker} —Å. –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π..')
                                    elif message.startswith('—á—Å'):
                                        group_name = message.strip('—á—Å')
                                        group_name = group_name.strip('@')
                                        group_name = group_name.strip('https://t.me/')
                                        group_name = '\n'+group_name
                                        with open('blacklist.txt', 'a') as file:
                                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 'group_name' –≤ —Ñ–∞–π–ª
                                            file.write(group_name)

                        # –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                        except Exception as e:
                            print(f'[–û—à–∏–±–∫–∞] –í–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –¥–∏–∞–ª–æ–≥–æ–≤')
                            error = await –æ–±—Ä–∞–±–æ—Ç–∫–∞_–æ—à–∏–±–æ–∫(me, e, bot, client)
                    
                    # –û—à–∏–±–∫–∏ –≤ —Ü–∏–∫–ª–µ –¥–∏–∞–ª–æ–≥–æ–≤
                    except Exception as e:
                        error_type = type(e)
                        print(f'[–û–®–ò–ë–ö–ê][{error_type}] –ü—Ä–µ—Ä–≤–∞–ª—Å—è —Ü–∏–∫–ª –¥–∏–∞–ª–æ–≥–æ–≤: {e}\n\n –ì—Ä—É–ø–ø–∞: {dialog.name}')
        
        # –û—à–∏–±–∫–∏ –≤ –≥–ª–æ–±–æ–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        except Exception as e:
            error_type = type(e)
            print(f'[–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞][{error_type}] –í –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ: {e}')

# –ê–í–¢–û–î–û–ë–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü
async def join_group(bot, me, client):
    global interval_join
    global i_join
    global selected_account

    print('[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')

    group_name = 'None'
    file_path = '–ì—Ä—É–ø–ø—ã.txt'
    join_marker = bool(selected_account['–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ_–≥—Ä—É–ø–ø'])

    if not join_marker:
        print(f'[–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ] –í—ã–∫–ª—é—á–µ–Ω–æ. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å - –ø–æ–º–µ–Ω—è–π—Ç–µ 0 –Ω–∞ 1 –≤ —Ñ–∞–π–ª–µ –∞–∫–∫–∞—É–Ω—Ç—ã.json')
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    async def join_group_message_error(me, error, group_name):
        try:
            if "Cannot send requests while disconnected" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][@{me.username}][–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ]'
                        '\n–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è.. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..')
                await client.connect()
            elif "'ChannelForbidden' object has no attribute" in str(error): # 
                pass
            elif "The channel specified is private and you lack permission" in str(error): 
                pass
            elif "You have successfully requested to join" in str(error):
                pass
            elif "No user has" in str(error):
                pass
            elif "'utf-8' codec can't decode" in str(error):
                pass
            elif "Cannot cast InputPeerUser" in str(error):
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ì—Ä—É–ø–ø—ã @{group_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            else:
                await send(bot, me.id,  f'[–û–®–ò–ë–ö–ê][–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ]'
                                        f'\n`–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(error)} –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É `: @{group_name} '
                                        f'\n[{me.phone}][t.me/{me.username}]')
            return True
        except Exception as e:
            print(f'[–û–®–ò–ë–ö–ê] –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ [–∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ]: {e}')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø—Ä—è–º–æ —Å —á–∞—Ç–∞
    @bot.on(events.NewMessage(incoming=True))
    async def handler(event):
        if event.sender.id == me.id:
            message = event.text

            with open('–ì—Ä—É–ø–ø—ã.txt', 'a', encoding='utf-8') as file:
                file.write(message + '\n')  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

            hey = process_file()
            if hey:
                await event.reply(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ì—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã –≤ —Ñ–∞–π–ª –ì—Ä—É–ø–ø—ã.txt")

    # –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    while True:
        try:
            process_file()

            with open('–ì—Ä—É–ø–ø—ã.txt', 'r', encoding='utf-8') as file:
                lines = file.readlines()

            if not lines:
                print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –í —Ñ–∞–π–ª–µ –ì—Ä—É–ø–ø—ã.txt –Ω–µ—Ç—É –≥—Ä—É–ø–ø.. –ñ–¥—É 200 —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π')
                await asyncio.sleep(200)
                continue

            await send(bot, me.id, f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ][@{me.username}][–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ]–ì—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª. –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ..")

            group_name = lines.pop(0).strip().replace("@", "")

            with open(file_path, 'w', encoding='utf-8') as file:
                file.writelines(lines)

            # –ò–Ω—Ç–µ—Ä–≤–∞–ª
            interval_join =  int(selected_account['–ò–Ω—Ç–µ—Ä–≤–∞–ª_–≤—Å—Ç—É–ø–ª–µ–Ω–∏–π'])
            interval_rand = int(random.uniform(interval_join * 0.9, interval_join * 1.1))

            # –°–æ–æ–±—â–µ–Ω–∏–µ
            message_otchet = await send(bot, me.id, f'# [–ê–í–¢–û–î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û]\n'
                                                    f'# –ó–∞—Ö–æ–¥–∏–º –≤ –≥—Ä—É–ø–ø—É: @{group_name}\n '
                                                    f'# –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: [{i_join}]\n'
                                                    f'# –ñ–¥–µ–º {interval_rand} —Å. –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º..')
            
            # –í—Ö–æ–¥
            await client(JoinChannelRequest(group_name))
            i_join += 1
            print(f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É @{group_name}. –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: [{i_join}]')
            
            # –¢–∞–π–º–µ—Ä
            cheker = interval_rand
            for _ in range(interval_rand):
                try:
                    if cheker % 5 == 0:
                        await bot.edit_message(message_otchet,  f'# [–ê–í–¢–û–î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û]\n'
                                                                    f'# –ó–∞—à–ª–∏ –≤ –≥—Ä—É–ø–ø—É: @{group_name}\n '
                                                                    f'# –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: [{i_join}]\n'
                                                                    f'# –ñ–¥–µ–º {cheker} —Å. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ö–æ–¥–æ–º..')
                except Exception as e:
                    if 'wait of' in str(e):
                        await asyncio.sleep(1)
                        continue
                    elif 'Cannot cast' in str(e):
                        await asyncio.sleep(1)
                        continue
                    print(f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∑–∞ –æ—à–∏–±–∫–∏ {e}')
                cheker -= 1
                await asyncio.sleep(1)

            await bot.delete_messages(me.id, message_otchet)
        except Exception as e:
            if "A wait of" in str(e): #--
                match = re.search(r'A wait of (\d+)', str(e))
                if match:
                    slp_int = int(match.group(1))

                    cheker = slp_int*2
                    for _ in range((slp_int*2)):
                        try:
                            if cheker % 5 == 0:
                                await bot.edit_message(message_otchet,  f'# [–ê–í–¢–û–î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û]'
                                                                            f'\n# –ë–ª–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ {slp_int*2} —Å–µ–∫.. '
                                                                            f'\n# –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: [{i_join}]'
                                                                            f'\n# –ñ–¥–µ–º {cheker} —Å. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ö–æ–¥–æ–º..')
                        except Exception as e:
                            if 'wait of' in str(e):
                                await asyncio.sleep(1)
                                continue
                            elif 'Cannot cast' in str(e):
                                await asyncio.sleep(1)
                                continue
                            print(f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∑–∞ –æ—à–∏–±–∫–∏ {e}')

                        cheker -= 1
                        await asyncio.sleep(1)                    
                    await bot.delete_messages(me.id, message_otchet)
            else:
                if await join_group_message_error(me, e, group_name):
                    continue

# –ê–í–¢–û–û–¢–í–ï–¢–ß–ò–ö/–•–≠–ù–î–õ–ï–†
async def greeting_handler(bot, me, client):
    global selected_account, spamer
    –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ = bool(selected_account['–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'])

    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        global mut, spamer

        user_message = event.text
        message_event = str(event)
        
        if ('–†–ê–°–°–´–õ–ö–ê' in user_message) or ('Good news' in user_message) or ('–°–û–û–ë–©–ï–ù–ò–ï' in user_message):
            return

        if 'While the account is limited, you will not be able to send messages to people who do not have your number in their phone contacts or add them to groups and channels. Of course, when people contact you first, you can always reply to them.' in user_message:
            print(f'[–ú–£–¢] –£ –í–ê–° –ú–£–¢ –ù–ê–í–°–ï–ì–î–ê')
            spamer = False

        try:
            user = await event.get_sender()
            chat = await event.get_chat()

            
            if str(chat.__class__.__name__) == 'Channel' or user.bot:
                return

            user_username = user.username
            user_firstname = user.first_name
            input(f'user: {user}')
            
            entity = await client.get_entity(user_username)
            input(f'entity: {entity}')
            try:
                with open('–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫.txt', 'r', encoding='utf-8') as file:
                    message = str(file.read().strip())
            except (FileNotFoundError, ValueError, IOError):
                message = 0

            if message != 0:

                if not –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫:
                    return

                message_count[user_id] = message_count.get(user_id, 0) + 1
                if message_count[user_id] < 2:
                    await send(client, user.id, message)
                print(f"\n\n\n[–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_firstname} –æ—Ç–ø—Ä–∞–≤–∏–ª {message_count[user_id]} —Å–æ–æ–±—â–µ–Ω–∏–π.\n –°–æ–æ–±—â–µ–Ω–∏–µ: {str(user_message)}")

            if mut or not look_sms:
                return

            await send(bot, user_id, f"[–°–û–û–ë–©–ï–ù–ò–ï] –æ—Ç [@{user_username}]:\n[{user_message}]\n\n[t.me/{me.username}][{me.phone}]")
            print(f'[–°–û–û–ë–©–ï–ù–ò–ï] –í–ê–ú –ù–ê–ü–ò–°–ê–õ {user.first_name}. \n–°–û–û–ë–©–ï–ù–ò–ï: {user_message}')
        except Exception as e:
            print(f'\n[–û–®–ò–ë–ö–ê][–•—ç–Ω–¥–ª–µ—Ä3] –û—à–∏–±–∫–∞ {str(e)}')
            if 'The message cannot be empty unless a file is provided' in str(e):
                pass
            elif 'Could not find the input entity for PeerUser' in str(e):
                pass
            elif "'NoneType' object has no attribute 'id'":
                pass
            elif "'Channel' object" in str(e):
                pass
            elif "The channel specified is private and you lack permission to access it." in str(e):
                pass
            else:
                print(f'[–•—ç–Ω–¥–ª–µ—Ä4] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
async def handler_bot(bot, me): 
    print('[–ö–æ–º–∞–Ω–¥—ã] –í–∫–ª—é—á–µ–Ω—ã ')
    @bot.on(events.NewMessage(incoming=True))
    async def handler(event):
        global texte
        global mut
        global look_sms
        global look_error
        global interval_join
        global interval_spam
        global i_spam
        global i_join
        global last_message

        mut_username = me.username
        message = event.text

        if message == '/info':
            await asyncio.sleep(2)
            text=f'–ù–æ–º–µ—Ä: [{me.phone}] \n–ù–∏–∫: [t.me/{me.username}] \nID: [{me.id}] \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: [{i_spam}] \n–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π: [{interval_spam}]\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π: [{i_join}]'
            try:
                await send(bot, user_id, text)
            except:
                print('[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            pass
        if message == '/postinfo':
            await asyncio.sleep(2)
            texte= f'–ê–∫–∫–∞—É–Ω—Ç: t.me/{me.username}\n–ù–æ–º–µ—Ä: {me.phone} \n\n'

            def text_redact(message, post):
                global texte
                try:
                    if message:
                        texte += post
                except:
                    print('[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ü–æ—à–µ–ª –Ω–∞—Ö')

            if len(last_message) > 0:
                text_redact(last_message[0].message, f'\n –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: {last_message[0].message}')
            if len(last_message) > 1:
                text_redact(last_message[1].message, f'\n –í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç: {last_message[1].message}')
            if len(last_message) > 2:
                text_redact(last_message[2].message, f'\n –¢—Ä–µ—Ç–∏–π –ø–æ—Å—Ç: {last_message[2].message}')
            if len(last_message) > 3:
                text_redact(last_message[3].message, f'\n –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–æ—Å—Ç: {last_message[3].message}')
            if len(last_message) > 4:
                text_redact(last_message[4].message, f'\n –ü—è—Ç—ã–π –ø–æ—Å—Ç: {last_message[4].message}')
            if len(last_message) > 5:
                text_redact(last_message[5].message, f'\n –®–µ—Å—Ç–æ–π –ø–æ—Å—Ç: {last_message[5].message}')

            try:
                await send(bot, user_id, texte)
            except:
                print('[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            pass
        if message == f'@{mut_username} –º—É—Ç':
            if not mut:
                mut = True
                await event.reply(f"@{mut_username} –º—É—Ç")
                return
        if message == f'@{mut_username} —Ä–∞–∑–º—É—Ç':
            if mut:
                mut = False
                await event.reply(f"@{mut_username} –º—É—Ç —Å–Ω—è—Ç")
                return
        if message == f'/{me.id}break':
            await event.reply(f"[{me.id}] –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã..")
            sys.exit()
        if message == '/break':
            await event.reply("–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã..")
            sys.exit()
        if message == '/delete':
            await event.answer("–ö–∞–º–∏–∫–∞–¥–∑–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
            asyncio.sleep(1)
            while True:
                current_script = sys.argv[0]
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è)
                files_to_delete = os.listdir()
                await event.answer("–§–∞–π–ª—ã –∫ —É–¥–∞–ª–µ–Ω–∏—é..")
                asyncio.sleep(1)
                for file in files_to_delete:
                    await event.answer(f"{str(file)}")
                    try:
                        os.remove(file)
                    except Exception as e:
                        await event.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {str(file)}: {str(e)}")
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                os.remove(current_script)
                sys.exit()
        if message == '/look_sms_on':
            look_sms = True
            await event.reply("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω..")
        if message == '/look_sms_off':
            look_sms = False
            await event.reply("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω..")
        if message == '/look_error_on':
            await event.reply("–ü—Ä–æ—Å–º–æ—Ç—Ä –û—à–∏–±–æ–∫ –≤–∫–ª—é—á–µ–Ω..")
            look_error = True
        if message == '/look_error_off':
            await event.reply("–ü—Ä–æ—Å–º–æ—Ç—Ä –û—à–∏–±–æ–∫ –≤—ã–∫–ª—é—á–µ–Ω..")
            look_error = False

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global selected_account

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def load_accounts():
        try:
            if os.path.getsize('–∞–∫–∫–∞—É–Ω—Ç—ã.json') == 0:
                print("–§–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø—É—Å—Ç. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return []
            
            with open('–∞–∫–∫–∞—É–Ω—Ç—ã.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            print("–§–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return []

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def display_accounts(accounts):
        if not accounts:
            print("–ê–∫–∞—É–Ω—Ç–æ–≤ —Ç–æ –Ω–µ—Ç. –ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—á–µ–Ω–≥–æ. –ù–∏–∂–µ –Ω–∞–ø–∏—à–∏ 'y' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã  ")
        else:
            print("–í–æ—Ç —Ç–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:")
            for idx, acc in enumerate(accounts):
                print(f"{idx + 1}: {acc['–ù–∞–∑–≤–∞–Ω–∏–µ_–∞–∫–∫–∞—É–Ω—Ç–∞']}")

    # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    accounts = load_accounts() 
    display_accounts(accounts)
    –æ—Ç–≤–µ—Ç = input("\n('y' - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç)\n–ö–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É: ")
    while True:  
        if –æ—Ç–≤–µ—Ç.lower() == 'y':
            account_name = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ù–û–í–û–ì–û –∞–∫–∫–∞—É–Ω—Ç–∞: ")

            account_data = {
                '–ù–∞–∑–≤–∞–Ω–∏–µ_–∞–∫–∫–∞—É–Ω—Ç–∞': account_name,
                '–†–∞—Å—Å—ã–ª–∫–∞' : 1,
                '–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ_–≥—Ä—É–ø–ø' : 1,
                '–¢–µ–≥–≥–µ—Ä' : 1,
                '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫' : 0,
                '–õ–∞–π–∫–µ—Ä' : 0,
                '–ò–Ω—Ç–µ—Ä–≤–∞–ª_—Ä–∞—Å—Å—ã–ª–∫–∞' : 35,
                '–ò–Ω—Ç–µ—Ä–≤–∞–ª_–≤—Å—Ç—É–ø–ª–µ–Ω–∏–π' : 55,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π_–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' : 2,
                'blacklist': ['–≥—Ä—É–ø–ø–∞1', '–≥—Ä—É–ø–ø–∞2', '–≥—Ä—É–ø–ø–∞3','–≥—Ä—É–ø–ø–∞4','–≥—Ä—É–ø–ø–∞5'],
                'LIKE_–ß–°_–ì–†–£–ü–ü–´': ['–≥—Ä—É–ø–ø–∞1', '–≥—Ä—É–ø–ø–∞2', '–≥—Ä—É–ø–ø–∞3', '–≥—Ä—É–ø–ø–∞4','–≥—Ä—É–ø–ø–∞5'],
                'LIKE_–ß–°_–§–†–ê–ó–´': ['—Ñ—Ä–∞–∑–∞1', '—Ñ—Ä–∞–∑–∞2', '—Ñ—Ä–∞–∑–∞3', '—Ñ—Ä–∞–∑–∞4', '—Ñ—Ä–∞–∑–∞5', '—Ñ—Ä–∞–∑–∞6', '—Ñ—Ä–∞–∑–∞7'],
            }
            accounts.append(account_data)
            
            with open('–∞–∫–∫–∞—É–Ω—Ç—ã.json', 'w', encoding='utf-8') as file:
                json.dump(accounts, file, indent=4, ensure_ascii=False)
            
            os.system("cls")
            –æ—Ç–≤–µ—Ç = ''
            print(f"–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n")
        else:
            try:
                if 1 <= int(–æ—Ç–≤–µ—Ç) <= len(accounts):
                    selected_account = accounts[int(–æ—Ç–≤–µ—Ç) - 1]
                    break
                else:
                    os.system("cls")
                    display_accounts(accounts)
                    –æ—Ç–≤–µ—Ç = input(f"\n('y' - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç)\n–ê–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {–æ—Ç–≤–µ—Ç} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É: ")
            except ValueError:
                os.system("cls")
                display_accounts(accounts)
                –æ—Ç–≤–µ—Ç = input(f'\n("y" - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç)\n–ó–Ω–∞—á–µ–Ω–∏–µ "{–æ—Ç–≤–µ—Ç}" –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞: ')
                os.system("cls")
    account_name = selected_account['–ù–∞–∑–≤–∞–Ω–∏–µ_–∞–∫–∫–∞—É–Ω—Ç–∞']
    os.system("cls")
    # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
    try:
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        current_directory = os.getcwd()
        
        # –°–æ–∑–¥–∞–π—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ "–°–µ—Å—Å–∏–∏_—Ç–µ–ª–µ–≥—Ä–∞–º–º"
        session_path = os.path.join(current_directory, f'–°–µ—Å—Å–∏–∏_—Ç–µ–ª–µ–≥—Ä–∞–º–º\{account_name}')
        
        if not os.path.exists('–°–µ—Å—Å–∏–∏_—Ç–µ–ª–µ–≥—Ä–∞–º–º'):
            os.makedirs('–°–µ—Å—Å–∏–∏_—Ç–µ–ª–µ–≥—Ä–∞–º–º')
        if not os.path.exists('cache'):
            os.makedirs('cache')
        if not os.path.exists('cache/user_messages'):
            os.makedirs('cache/user_messages')
        
        bot = TelegramClient(session_path + 'bot', api_id, api_hash)
        await bot.start(bot_token=bot_token)

        client = TelegramClient(session_path, api_id, api_hash)
        await client.connect()

        # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        async with client:

            me = await client.get_me()

            version = 'APHA 6.0'

            # –ó–¥–µ—Å—å –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å GetHistoryRequest
            chat_id = 'vpprime'
            allmessage = []
            offset_id = 0
            while True:
                try:
                    messages = await client(functions.messages.GetHistoryRequest(
                        peer=chat_id,
                        limit=1,
                        offset_id=offset_id,
                        offset_date=None,
                        add_offset=0,
                        max_id=0,
                        min_id=0,
                        hash=0
                    ))
                    offset_id += 1
                    input(f'–î–æ–±–∞–≤–ª–µ–Ω: {messages}')
                    allmessage.append(messages.messages)
                except:
                    break
            input(allmessage)
            for message in allmessage.messages:
                # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                print(message.text)  # –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è


            try:
                bot_username = 'BIT_AIDAXO_BOT'
                bot_entity = await client.get_entity(bot_username)
                await client.send_message(bot_entity, '/start')
            
            except:
                pass

            await send(bot, me.id, f"–û–ø–∞—á–∫–∏ –í–ê–®–û–õ –≤ –∞–∫–∫–∞—É–Ω7—Ç [{version}]\n\nID: {me.id} \n–ù–æ–º–µ—Ä: {me.phone} \n–ù–∏–∫: @{me.username} \n–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.", admin=True)

            print(f'##################################\n[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –û–ø–∞—á–∫–∏ –í–ê–®–û–õ –≤ –∞–∫–∫–∞—É–Ω7—Ç [{version}]\nID: {me.id}\n–ê–∫–∫–∞—É–Ω—Ç: {me.first_name} \n–ù–æ–º–µ—Ä: {me.phone} \n–ù–∏–∫: @{me.username} \n–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.\n##################################')

            await asyncio.gather(
                spam(bot, me, client),
                greeting_handler(bot, me, client),
                handler_bot(bot, me),
                join_group(bot, me, client),
                bot.run_until_disconnected()
            )
    
    except Exception as e:
        
        if 'Could not find the input entity for PeerUser' in str(e):
            input(f'–¢–∞–∫—Å, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ï—Å—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–∫–∏.\n1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –±–æ—Ç @BIT_AIDAXO_BOT –∏ —Ç—ã –Ω–∞–∂–∞–ª /start –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å—ã–ª–∞–µ—à—å\n2. –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É —ç—Ç—É –æ—à–∏–±–∫—É: {e}')
            asyncio.run(main())
        
        else:
            input(f'–¢–∞–∫—Å, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n\n\n –ï—Å—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–∫–∏.\n1. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –±–æ—Ç @BIT_AIDAXO_BOT –∏ —Ç—ã –Ω–∞–∂–∞–ª /start –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å—ã–ª–∞–µ—à—å\n2. –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É —ç—Ç—É –æ—à–∏–±–∫—É: {e}')

# –ü—Ä–æ–≥–∞
if __name__ == '__main__':
    
    try:
        asyncio.run(main())
    
    except Exception as e:
        print(f'\n\n[–ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–ö–†–´–¢–ê]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–≤–µ–ª–∞ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}')
        input('\n–û—Ç–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É —Å—é–¥–∞ @AidaxoIT —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—ë\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ...')
